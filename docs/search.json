[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"sample book written Markdown. can use anything Pandoc’s Markdown supports; example, math equation \\(^2 + b^2 = c^2\\).","code":""},{"path":"index.html","id":"usage","chapter":"About","heading":"Usage","text":"bookdown chapter .Rmd file, .Rmd file can contain one (one) chapter. chapter must start first-level heading: # good chapter, can contain one (one) first-level heading.Use second-level higher headings within chapters like: ## short section ### even shorter section.index.Rmd file required, also first book chapter. homepage render book.","code":""},{"path":"index.html","id":"render-book","chapter":"About","heading":"Render book","text":"can render HTML version example book without changing anything:Find Build pane RStudio IDE, andFind Build pane RStudio IDE, andClick Build Book, select output format, select “formats” ’d like use multiple formats book source files.Click Build Book, select output format, select “formats” ’d like use multiple formats book source files.build book R console:render example PDF bookdown::pdf_book, ’ll need install XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.org/tinytex/.","code":"\nbookdown::render_book()"},{"path":"index.html","id":"preview-book","chapter":"About","heading":"Preview book","text":"work, may start local server live preview HTML book. preview update edit book save individual .Rmd files. can start server work session using RStudio add-“Preview book”, R console:","code":"\nbookdown::serve_book()"},{"path":"hello-bookdown.html","id":"hello-bookdown","chapter":"1 Hello bookdown","heading":"1 Hello bookdown","text":"chapters start first-level heading followed chapter title, like line . one first-level heading (#) per .Rmd file.","code":""},{"path":"hello-bookdown.html","id":"a-section","chapter":"1 Hello bookdown","heading":"1.1 A section","text":"chapter sections start second-level (##) higher heading followed section title, like sections . can many want within chapter.","code":""},{"path":"hello-bookdown.html","id":"an-unnumbered-section","chapter":"1 Hello bookdown","heading":"An unnumbered section","text":"Chapters sections numbered default. un-number heading, add {.unnumbered} shorter {-} end heading, like section.","code":""},{"path":"setting-up.html","id":"setting-up","chapter":"Setting up","heading":"Setting up","text":"Read necessary data source optimization. SnpEff v5.1 (Cingolani et al., 2012) used annotate genetic variants functional class based Norway spruce genome annotation.","code":""},{"path":"setting-up.html","id":"import-annotations-from-snpeff","chapter":"Setting up","heading":"Import annotations from SnpEff","text":"Read meta data samples.","code":"\n## working directory \nsetwd(\"~/mydata/Anoob/TNC\")\n\nlist <- list.files(path = \"../../datashare/Spruce/exome_capture/WES_mapping/Annotations/ref_Pglauca/VCF_split_files\", \n                   pattern = \"Red_Spruce_intersect_poly_\", recursive=TRUE, full.names = T)\n\ngenes <- lapply(list[1], function(x) read.table(x))\ncategory <- lapply(genes, function(x) unlist(lapply(strsplit(as.character(x[,8]), split = \"|\", fixed = T), function(y) y[2])))\n\nTAB <- genes[1:2]\nTAB <- do.call(rbind, TAB)\ncategory <- do.call(c, category)\n# Info samples\nnames <- unlist(lapply(strsplit(unlist(strsplit(as.character(read.table(\"all_bam.list\")[,1]), split = \"_rmdup.sorted.bam\")), split = \"./\"), function(x) x[2]))\npops <- unlist(lapply(strsplit(names, split=\"_\"), function(x) x[1]))\n\ninfo_inds <- read.table(\"./Info_samples_revised.txt\", header=T)\ninfo_inds <- info_inds[match(as.character(names), as.character(info_inds$Family)),]\ninfo_pops <- info_inds[!duplicated(info_inds$Site),-c(1,3,9,10)]"},{"path":"setting-up.html","id":"allele-probabilities-and-frequencies","chapter":"Setting up","heading":"Allele probabilities and frequencies","text":"","code":"\n# Read depth \ndepth <- apply(TAB[,-c(1:9)], 2, function(x) as.integer(unlist(lapply(strsplit(as.character(x), split = \":\"), function(y) y[2]))))\n\n# Genotype probabilities, changed by NA for the uncovered sites \ngen_prob <- apply(TAB[,-c(1:9)], 2, function(x) unlist(lapply(strsplit(as.character(x), split = \":\"), function(y) y[4])))\ngen_prob[which(depth==0)] <- NA\n\n# Proba alternative allele\naltern_proba <- apply(gen_prob, 2, function(x) (as.numeric(unlist(lapply(strsplit(as.character(x), split = \",\"), function(y) y[2])))+2*as.numeric(unlist(lapply(strsplit(as.character(x), split = \",\"), function(z) z[3]))))/2)\n\n# Frequency of the alternative allele for each locus and population\nTAB_pop <- lapply(unique(pops), function(x) altern_proba[,which(pops==x)])\nnames(TAB_pop) <- unique(pops)\nfreq_pop <- lapply(TAB_pop, function(x) apply(x, 1, function(y) sum(y, na.rm = T)/sum(!is.na(y))))"},{"path":"funtions-to-optimize-selection.html","id":"funtions-to-optimize-selection","chapter":"Funtions to optimize selection","heading":"Funtions to optimize selection","text":"","code":""},{"path":"funtions-to-optimize-selection.html","id":"select-regions-to-select-sources","chapter":"Funtions to optimize selection","heading":"Select regions to select sources","text":"Based idea Regional admixture provenancing (citation), seed sources selected regionally restoration site. Three groups source populations subsetted three planting sites, removing XVC HR northern ancestry. info regional ancestry detailed (citation).","code":"\n# Sources considered for the Maryland restoration site \nTAB_pop_maryland <- TAB_pop[which(names(TAB_pop)%in%info_pops$Site[which(info_pops$Region==\"E\" & !info_pops$State%in%c(\"NC\",\"TN\") & !info_pops$Site%in%c(\"XCV\",\"HR\"))])]\n\n# Sources considered for the West Virginia restoration site\nTAB_pop_westvirginia <- TAB_pop[which(names(TAB_pop)%in%info_pops$Site[which(info_pops$Region==\"E\" & info_pops$State==\"WV\" & !info_pops$Site%in%c(\"XCV\",\"HR\"))])]\n\n# Sources considered for the Virginia restoration site\nTAB_pop_virginia <- TAB_pop[which(names(TAB_pop)%in%info_pops$Site[which(info_pops$Region==\"E\" & (info_pops$State==\"WV\" & !info_pops$Site%in%c(\"XCV\") | info_pops$Site%in%c(\"GMF\",\"CR\",\"DG\",\"RP\")))])] # remove HR and CV for the paper"},{"path":"funtions-to-optimize-selection.html","id":"optimizing-genetic-diversity","chapter":"Funtions to optimize selection","heading":"Optimizing genetic diversity","text":"","code":"\n# function to estimate allelic richness after rarefaction\nrarefy_AR <- function(data, g, bootstraping=100){\n  Nijg <- list()\n  Njg <- g*2\n  nbind <- ncol(data)\n  Nij <- list()\n  for(boot in 1:bootstraping){\n    inds <- sample(1:nbind, g, replace = FALSE)\n    if(g==1){\n      Nij[[boot]] <- data[,inds]*2}\n    if(g>1){\n      Nij[[boot]] <- apply(data[,inds], 1, function(x) sum(x, na.rm = T)/sum(!is.na(x)))*g*2}\n  }\n  Nijg <- rowMeans(do.call(cbind, Nij), na.rm = T)\n  Qijg <- (Njg-Nijg)/Njg\n  Pijg <- 1-Qijg\n  return(Pijg)\n}"},{"path":"funtions-to-optimize-selection.html","id":"estimate-the-genetic-load","chapter":"Funtions to optimize selection","heading":"Estimate the genetic load","text":"following function used estiamte ratio nonsynonymous/synonymous mutation based annotation SnpEff v5.1 (Cingolani et al., 2012), used annotate genetic variants functional class based Norway spruce genome annotation. functional categories viz. missense variant, splice acceptor variant, splice donor variant, splice region variant, start lost, stop gained, stop lost used designate non-synonymous mutation calculation genetic load.","code":"\ngenetic_load <- function(data, category){\n  nonsyn_sites <- which(category==\"missense_variant\" | category==\"splice_acceptor_variant\" | category==\"splice_donor_variant\" | category==\"splice_region_variant\" | category==\"start_lost\" | category==\"stop_gained\" | category==\"stop_lost\")\n  freq_nonsyn <- mean(data[nonsyn_sites], na.rm = T)\n  freq_syn <- mean(data[-nonsyn_sites], na.rm = T)\n  ratio_2 <- freq_nonsyn/freq_syn\n  return(ratio_2)\n}"},{"path":"funtions-to-optimize-selection.html","id":"combined-function-to-optimize-source-combinations","chapter":"Funtions to optimize selection","heading":"Combined function to optimize source combinations","text":"function combines rarefy_AR genetic_load function estimate expected heterozygosity (Hexp), allelic richness genetic load combinations P populations. P depends number sources one decides select restoration site.","code":"\n# function to estimate Hexp, Allelic Richness and Genetic Load in all combination of P populations\noptimize <- function(data, P){\n  \n  # Total diversity and load with all the populations\n  TAB_tot <- do.call(cbind,data)\n  freq_tot <- apply(TAB_tot, 1, function(y) sum(y, na.rm = T)/sum(!is.na(y)))\n  hexp_tot <- mean(2*freq_tot*(1-freq_tot), na.rm = T)\n  #all_rich_tot <- mean(rarefy_AR(TAB_tot, ncol(TAB_tot)), na.rm = T)\n  genetic_load_tot <- genetic_load(TAB_tot, category)\n  \n  # Genetic diversity and load with only a subset of P populations\n  hexp_sub <- list()\n \n  genetic_load_sub <- list()\n  names <- list()\n  comb <- combn(1:length(data), P, simplify = F)\n  for(i in 1:length(comb)){\n    TAB_sub <- do.call(cbind, data[comb[[i]]])\n    freq_sub <- apply(TAB_sub, 1, function(y) sum(y, na.rm = T)/sum(!is.na(y)))\n    hexp_sub[i] <- mean(2*freq_sub*(1-freq_sub), na.rm = T)\n    \n    genetic_load_sub[i] <- genetic_load(TAB_sub, category)\n    names[i] <- paste(names(data[comb[[i]]]), collapse=\"_\")\n  }\n  TAB_sub <- do.call(rbind, lapply(1:length(hexp_sub), function(x) c(Hexp = hexp_sub[[x]], GenLoad = genetic_load_sub[[x]]))) #AllRich = all_rich_sub[[x]], \n  TAB <- rbind(c(Hexp = hexp_tot, GenLoad = genetic_load_tot), TAB_sub) #AllRich = all_rich_tot, \n  rownames(TAB) <- c(\"total\", unlist(names))\n  \n  return(TAB)\n}"},{"path":"funtions-to-optimize-selection.html","id":"apply-the-function-to-get-optimal-source-combinations","chapter":"Funtions to optimize selection","heading":"Apply the function to get optimal source combinations","text":"","code":"\n# Optimization sources for site in Maryland\nres_maryland <- optimize(TAB_pop_maryland, 3)\nwhich.max(res_maryland[-1,1]/res_maryland[-1,2])\nres_maryland[c(1,which.max(res_maryland[-1,1]/res_maryland[-1,2])+1),]\n\n# Optimization sources for site in West Virginia\nres_westvirginia_4 <- optimize(TAB_pop_westvirginia, 4)\nwhich.max(res_westvirginia_4[-1,1]/res_westvirginia_4[-1,2])\n\n# Optimization sources for site in Virginia\nres_virginia_4 <- optimize(TAB_pop_virginia, 4)\nwhich.max(res_virginia_4[-1,1]/res_virginia_4[-1,2])"},{"path":"factors-affecting-source-selection.html","id":"factors-affecting-source-selection","chapter":"Factors affecting source selection","heading":"Factors affecting source selection","text":"Even though optimal source combinations obtained optimize function site. just list recommendations restoration practitioners select . final source combination selected depends seed availabiity year procurement.","code":""},{"path":"factors-affecting-source-selection.html","id":"plotting-with-base-r","chapter":"Factors affecting source selection","heading":"Plotting with base R","text":"","code":"\n# plots\n\n## MD\nhist(res_maryland[,1])\nres_maryland[\"XCS_XDS_XPK\",1] #0.1738237\nabline(v=0.1738237)\n\n## WV\nhist(res_westvirginia_4[,1]/res_westvirginia_4[,2])\nwhich.max(res_westvirginia_4[-1,1]/res_westvirginia_4[-1,2]) # the combination chosen for WV\nres_westvirginia_4[\"XCS_XDS_XPK_XSK\",1]/res_westvirginia_4[\"XCS_XDS_XPK_XSK\",2] \nabline(v=0.1826622, col=\"red\")\n\n## VA\n\nhist(res_virginia_4[-1,1]/res_virginia_4[-1,2])\nres_virginia_4[\"BFA_KOS_XDS_XPK\",1]/res_virginia_4[\"BFA_KOS_XDS_XPK\",2] # 0.1758529\nabline(v=0.1758529)"},{"path":"factors-affecting-source-selection.html","id":"plotting-with-ggplot2","chapter":"Factors affecting source selection","heading":"Plotting with ggplot2","text":"GD/GL plot across sites","code":"\n# Plots for APPS ----------------------------------------------------------\nrequire(ggplot2)\n\n# Maryland final\nMD_data <- as.data.frame(res_maryland[,1]/res_maryland[,2])\ncolnames(MD_data)[1] <- \"GD_GL\"\nMD_data$Sources <- rownames(MD_data)\nrownames(MD_data) <- NULL\nMD_data <- MD_data[-1,]\n\nMD_plot <-    ggplot(MD_data, aes(x=GD_GL)) +\n              geom_histogram(aes(y=..density..),color=\"#9FE2BF\",fill=\"white\", position=\"dodge\", bins=60)+\n              geom_density(alpha=.2, fill=\"#9FE2BF\", color=\"#DFFF00\") +\n              geom_vline(aes(xintercept=res_maryland[\"XCS_XDS_XPK\",1]/res_maryland[\"XCS_XDS_XPK\",2]),\n                         linetype=\"dashed\", color=\"#7B241C\")+\n              theme(legend.position=\"top\")\n\nplot1 <- MD_plot + scale_color_brewer(palette=\"Dark2\") +\n          theme_minimal()+theme_classic()+theme(legend.position=\"top\") +\n          ylab(\"Frequency\") + xlab(\"Genetic Diversity/Genetic Load\") + \n          theme_bw(base_size = 11, base_family = \"Times\") +\n          theme(axis.text=element_text(size=14), \n                axis.title=element_text(size=18),\n                panel.background = element_blank(), \n                legend.background = element_blank(), \n                panel.grid = element_blank(), \n                plot.background = element_blank(), \n                legend.text=element_text(size=rel(.8)), \n                strip.text = element_text(size=30),\n                legend.position = \"none\")\n\n\n# West Virginia\nWV_data <- as.data.frame(res_westvirginia_4[,1]/res_westvirginia_4[,2])\ncolnames(WV_data)[1] <- \"GD_GL\"\nWV_data$Sources <- rownames(WV_data)\nrownames(WV_data) <- NULL\nWV_data <- WV_data[-1,]\n\nWV_plot <-    ggplot(WV_data, aes(x=GD_GL)) +\n  geom_histogram(aes(y=..density..),color=\"#FF7F50\",fill=\"white\", position=\"dodge\", bins=60)+\n  geom_density(alpha=.2, fill=\"#FF7F50\", color=\"#FFBF00\") +\n  geom_vline(aes(xintercept=res_westvirginia_4[\"XCS_XDS_XPK_XSK\",1]/res_westvirginia_4[\"XCS_XDS_XPK_XSK\",2]),\n             linetype=\"dashed\", color=\"#7B241C\")+\n  theme(legend.position=\"top\")\n\nplot2 <- WV_plot + scale_color_brewer(palette=\"Dark2\") +\n          theme_minimal()+theme_classic()+theme(legend.position=\"top\") +\n          ylab(\"Frequency\") + xlab(\"Genetic Diversity/Genetic Load\") + \n          theme_bw(base_size = 11, base_family = \"Times\") +\n          theme(axis.text=element_text(size=14), \n                axis.title=element_text(size=18),\n                panel.background = element_blank(), \n                legend.background = element_blank(), \n                panel.grid = element_blank(), \n                plot.background = element_blank(), \n                legend.text=element_text(size=rel(.8)), \n                strip.text = element_text(size=30),\n                legend.position = \"none\")\n\n\n# Virginia\nVA_data <- as.data.frame(res_virginia_4[,1]/res_virginia_4[,2])\ncolnames(VA_data)[1] <- \"GD_GL\"\nVA_data$Sources <- rownames(VA_data)\nrownames(VA_data) <- NULL\nVA_data <- VA_data[-1,]\n\nVA_plot <-    ggplot(VA_data, aes(x=GD_GL)) +\n  geom_histogram(aes(y=..density..),color=\"#CCCCFF\",fill=\"white\", position=\"dodge\", bins=60)+\n  geom_density(alpha=.2, fill=\"#CCCCFF\", color=\"#6495ED\") +\n  geom_vline(aes(xintercept=res_virginia_4[\"BFA_KOS_XDS_XPK\",1]/res_virginia_4[\"BFA_KOS_XDS_XPK\",2]),\n             linetype=\"dashed\", color=\"#7B241C\")+\n  theme(legend.position=\"top\")\n\nplot3 <- VA_plot + scale_color_brewer(palette=\"Dark2\") +\n          theme_minimal()+theme_classic()+theme(legend.position=\"top\") +\n          ylab(\"Frequency\") + xlab(\"Genetic Diversity/Genetic Load\") + \n          theme_bw(base_size = 11, base_family = \"Times\") +\n          theme(axis.text=element_text(size=14), \n                axis.title=element_text(size=18),\n                panel.background = element_blank(), \n                legend.background = element_blank(), \n                panel.grid = element_blank(), \n                plot.background = element_blank(), \n                legend.text=element_text(size=rel(.8)), \n                strip.text = element_text(size=30),\n                legend.position = \"none\")\n\n\n\n# convert to long data\nMD_data2 <- MD_data\nMD_data2$Plot <- \"Maryland\"\nWV_data2 <- WV_data\nWV_data2$Plot <- \"West Virginia\"\nVA_data2 <- VA_data\nVA_data2$Plot <- \"Virginia\"\n\n\nGDGL_long_dat <- rbind(MD_data2,WV_data2,VA_data2)\nGDGL_long_dat$Plot <- factor(GDGL_long_dat$Plot,levels=c(\"Maryland\",\"West Virginia\",\"Virginia\"))\n# \n# figure dim: png(2000h,769w), pdf(7h,18w)\nGDGL_plot <- ggplot(GDGL_long_dat, aes(x=GD_GL,color=Plot,fill=Plot)) + facet_wrap(~Plot, scales=\"free\") + \n                # add histogram\n                geom_histogram(data=filter(GDGL_long_dat, Plot==\"Maryland\"), aes(y=..density..),color=\"#9FE2BF\",fill=\"white\", position=\"dodge\", bins=60)+\n                geom_histogram(data=filter(GDGL_long_dat, Plot==\"West Virginia\"), aes(y=..density..),color=\"#FF7F50\",fill=\"white\", position=\"dodge\", bins=60)+\n                geom_histogram(data=filter(GDGL_long_dat, Plot==\"Virginia\"), aes(y=..density..),color=\"#CCCCFF\",fill=\"white\", position=\"dodge\", bins=60)+\n                \n                # add geom_density\n                geom_density(data=filter(GDGL_long_dat, Plot==\"Maryland\"), alpha=.2, fill=\"#9FE2BF\", color=\"#40E0D0\") + \n                geom_density(data=filter(GDGL_long_dat, Plot==\"West Virginia\"), alpha=.2, fill=\"#FF7F50\", color=\"#DE3163\") + \n                geom_density(data=filter(GDGL_long_dat, Plot==\"Virginia\"), alpha=.2, fill=\"#CCCCFF\", color=\"#6495ED\") +\n                \n                # add vline\n                geom_vline(data=filter(GDGL_long_dat, Plot==\"Maryland\"), \n                           aes(xintercept=res_maryland[\"XCS_XDS_XPK\",1]/res_maryland[\"XCS_XDS_XPK\",2]),\n                           linetype=\"dashed\", color=\"#7B241C\") + \n                geom_vline(data=filter(GDGL_long_dat, Plot==\"West Virginia\"), \n                           aes(xintercept=res_westvirginia_4[\"XCS_XDS_XPK_XSK\",1]/res_westvirginia_4[\"XCS_XDS_XPK_XSK\",2]),\n                           linetype=\"dashed\", color=\"#7B241C\") + \n                geom_vline(data=filter(GDGL_long_dat, Plot==\"Virginia\"), \n                           aes(xintercept=res_virginia_4[\"BFA_KOS_XDS_XPK\",1]/res_virginia_4[\"BFA_KOS_XDS_XPK\",2]),\n                           linetype=\"dashed\", color=\"#7B241C\") +\n                # theme\n                theme_minimal()+theme_classic()+theme(legend.position=\"top\") +\n                ylab(\"Frequency\") + xlab(\"Genetic Diversity/Genetic Load\") + \n                theme_bw(base_size = 11, base_family = \"Times\") +\n                theme(axis.text=element_text(size=14), \n                      axis.title=element_text(size=18),\n                      panel.background = element_blank(), \n                      legend.background = element_blank(), \n                      panel.grid = element_blank(), \n                      plot.background = element_blank(), \n                      legend.text=element_text(size=rel(.8)), \n                      strip.text = element_text(size=30),\n                      legend.position = \"none\")\n\nGDGL_plot"},{"path":"save-data-for-downstream-analysis.html","id":"save-data-for-downstream-analysis","chapter":"Save data for downstream analysis","heading":"Save data for downstream analysis","text":"","code":""},{"path":"save-data-for-downstream-analysis.html","id":"creating-the-gdgl-list","chapter":"Save data for downstream analysis","heading":"Creating the GD/GL list","text":"","code":"\n# save data for further analysis\nMD_reg_GDGL <- as.data.frame(res_maryland)\nMD_reg_GDGL$GDGL <- MD_reg_GDGL$Hexp/MD_reg_GDGL$GenLoad\n\nWV_reg_GDGL <- as.data.frame(res_westvirginia_4)\nWV_reg_GDGL$GDGL <- WV_reg_GDGL$Hexp/WV_reg_GDGL$GenLoad\n\nVA_reg_GDGL <- as.data.frame(res_virginia_4)\nVA_reg_GDGL$GDGL <- VA_reg_GDGL$Hexp/VA_reg_GDGL$GenLoad\n\nGDGL_list <- list()\nGDGL_list[[1]] <- MD_reg_GDGL\nGDGL_list[[2]] <- WV_reg_GDGL\nGDGL_list[[3]] <- VA_reg_GDGL\n\nnames(GDGL_list) <- c(\"Maryland_GDGL\",\"West_Virginia_GDGL\",\"Virginia_GDGL\")\n\n# saveRDS(GDGL_list, \"./OUTPUT/Genetic_diversity_and_Genetic_load/GDGL_list\")"},{"path":"save-data-for-downstream-analysis.html","id":"for-source-selection-maps","chapter":"Save data for downstream analysis","heading":"For source selection maps","text":"","code":"\nMarylandSources <- tail(sort(res_maryland[-1,1]/res_maryland[-1,2]),50)\nMarylandSources <- as.data.frame(MarylandSources)\nMarylandSources[2] <- rownames(MarylandSources)\nrownames(MarylandSources) <- NULL\ncolnames(MarylandSources)[2] <- \"Source_combination\"\ncolnames(MarylandSources)[1] <- \"GD/GL\"\n\nVirginiaSources <- tail(sort(res_virginia_4[-1,1]/res_virginia_4[-1,2]),50)\nVirginiaSources <- as.data.frame(VirginiaSources)\nVirginiaSources[2] <- rownames(VirginiaSources)\nrownames(VirginiaSources) <- NULL\ncolnames(VirginiaSources)[2] <- \"Source_combination\"\ncolnames(VirginiaSources)[1] <- \"GD/GL\"\n\n\nWestVirginiaSources <- tail(sort(res_westvirginia_4[-1,1]/res_westvirginia_4[-1,2]),50)\nWestVirginiaSources <- as.data.frame(WestVirginiaSources)\nWestVirginiaSources[2] <- rownames(WestVirginiaSources)\nrownames(WestVirginiaSources) <- NULL\ncolnames(WestVirginiaSources)[2] <- \"Source_combination\"\ncolnames(WestVirginiaSources)[1] <- \"GD/GL\"\n\n# write.csv(MarylandSources,\"./OUTPUT/MarylandSources_selected_top50.csv\")\n# write.csv(VirginiaSources,\"./OUTPUT/VirginiaSources_selected_top50.csv\")\n# write.csv(WestVirginiaSources,\"./OUTPUT/WestVirginiaSources_selected_top50.csv\")"},{"path":"save-data-for-downstream-analysis.html","id":"estimate-genetic-load-and-genetic-diversity-of-each-pops","chapter":"Save data for downstream analysis","heading":"Estimate genetic load and genetic diversity of each pops","text":"","code":"\n# Optimization sources for site in Maryland\nres_maryland_singular <- optimize(TAB_pop_maryland, 1)\nwhich.max(res_maryland_singular[-1,1]/res_maryland_singular[-1,2])\nres_maryland_singular[c(1,which.max(res_maryland_singular[-1,1]/res_maryland_singular[-1,2])+1),]\n\n# write.csv(res_maryland_singular, \"./OUTPUT/Genetic_diversity_and_Genetic_load/maryland_GDGL_per_source\")\n\n# Optimization sources for site in West Virginia\nres_westvirginia_singular <- optimize(TAB_pop_westvirginia, 1)\nwhich.max(res_westvirginia_singular[-1,1]/res_westvirginia_singular[-1,2])\nres_westvirginia_singular[c(1,which.max(res_westvirginia_singular[-1,1]/res_westvirginia_singular[-1,2])+1),]\n\n# write.csv(res_westvirginia_singular, \"./OUTPUT/Genetic_diversity_and_Genetic_load/west_virginia_GDGL_per_source\")\n\n# Optimization sources for site in Virginia\nres_virginia_singular <- optimize(TAB_pop_virginia, 1)\nwhich.max(res_virginia_singular[-1,1]/res_virginia_singular[-1,2])\nres_virginia_singular[c(1,which.max(res_virginia_singular[-1,1]/res_virginia_singular[-1,2])+1),]\n\n# write.csv(res_virginia_singular, \"./OUTPUT/Genetic_diversity_and_Genetic_load/virginia_GDGL_per_source\")\n\n# full sets of pops\nTAB_pop_full <- TAB_pop[which(names(TAB_pop)%in%info_pops$Site[which(info_pops$Region==\"E\" & !info_pops$Site%in%c(\"XCV\",\"HR\"))])]\n\nres_pop_full_singular <- optimize(TAB_pop_full, 1)\nwhich.max(res_pop_full_singular[-1,1]/res_pop_full_singular[-1,2])\nres_pop_full_singular[c(1,which.max(res_pop_full_singular[-1,1]/res_pop_full_singular[-1,2])+1),]"}]
